from sapphire.interface import SapphireInterface
import curses, time, threading

# TODO make it lol


class SapphireCtl():

	def __init__(self):
		self.lock = threading.Lock()
		self.interface = SapphireInterface("sapphire-ctl/tui")
		self.is_running = True

	def init(self, scr: curses.window):

		self.scr: curses.window = scr

		curses.noecho()
		curses.curs_set(0)

		self.scr.keypad(True)
		self.scr.nodelay(True)

		curses.start_color()
		curses.use_default_colors()


		curses.init_pair(1, curses.COLOR_WHITE, -1)
		curses.init_pair(2, curses.COLOR_WHITE, -1)

		
		height, width = self.scr.getmaxyx()

		self.window = curses.newwin(
			height - 1,
			width - 2,
			1,
			2
		)

		self.height, self.width = self.window.getmaxyx()

		self.window.bkgd(" ", curses.color_pair(1))
		self.window.box()

		self.window.keypad(True)

		self.init_input_window()
		self.run()


	def init_input_window(self):

		self.input_window = self.window.subwin(
			3,
			self.width - 4,
			self.height - 3,
			4
		)
		self.input_window.bkgd(" ", curses.color_pair(2))
		self.input_window.box()
		self.input_window.keypad(True)

		self.input_buffer: list[str] = []
		_, self.max_buffer_displayable = self.input_window.getmaxyx()
		self.max_buffer_displayable -= 4

	
	def run(self):

		while self.is_running:
			key = self.scr.getch()
			self.handle_key(key)

			self.input_window.refresh()
			self.window.refresh()
			time.sleep(0.01)


	def handle_key(self, key):
		if key == curses.ERR:
			return

		if key >= ord("A") and key <= ord("z"):			
			self.input_buffer.append(chr(key))
		elif key == curses.KEY_BACKSPACE:
			if len(self.input_buffer) > 0: self.input_buffer.pop()
		elif key == curses.KEY_ENTER:
			pass

		self.show_input_buffer()

	
	def show_input_buffer(self):

		self.input_window.addstr(1, 1, " "*self.max_buffer_displayable)
		length = len(self.input_buffer)

		if length < self.max_buffer_displayable:
			displayed_buffer = self.input_buffer
		else:
			displayed_buffer = self.input_buffer[length-self.max_buffer_displayable:]

		self.input_window.addstr(1, 1, "".join(displayed_buffer))
		

	def parse_input(self, s: str):
		pass

	def parse_command(self, s: str):
		pass

	def send_user_msg(self, s: str):
		pass


	


		
		



def main():
	ctl = SapphireCtl()
	curses.wrapper(ctl.init)

if __name__ == "__main__":
	main()